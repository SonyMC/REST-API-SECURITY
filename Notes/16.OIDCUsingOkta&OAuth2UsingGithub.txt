Refer:
	- Okta.png
	-D:\OneDrive\Study\Java\REST-API-Security\11.users-ws-okta

Note: 
	- We will not be using teh DB to get the users bit instead we will be using Okta
	- Sprign Security will eb managing all security


1)Okta Introduction:
	- Build on AWS
	- Identity Management Service
	- Provision and manage Users like employees, customers, suppliers, etc.
	- Connect users to cloud SaaS apps
	- It can streamline the user experience by connectiing users to cloud and Saas apps
	- Supports different security mechanisms like Authentication, Authorization, SSO, MFA etc.
	- Supports various industry standards like SAML, OAuth, OIDC, etc
	- Identity-Managemetn-as-a-Service(IDaaS)

2) Other competing vendors:
	- OneLogin
	- Microsoft Azure Active Directory
	- Ping Indentity
	- Duo Securitys
		

3) Creating an Account in Octa:
	- https://developer.okta.com/
		- Free account
		- Oktaâ€™s Developer Edition provides everything you need to evaluate and explore Okta for your company. Up to 100 MAU with access to most key developer features in Oktaâ€™s products for free with no time limit.
		- I have used Githib OAuth to sign-up
		- Aftetr this I have created anothr user and given 'API Access Management Administrator' role to thsi user

	- Adding a person-:
		- Directory -> People -> Add Person
		- More Actioons: 
			- Import users from CSV
			- Activate
			- Deactivate
			- Expire pwds
			- Unlock people
	- API: 
		- Security -> API


4)Registering Users API in Okta:
	- Okta -> Applications-> Applications-> Create App Integration ->
		 - Sign in Method = OIDC - OpenID Connect
		 - Application Type = Web Application 
		 - Name = users-api
		 - Logo = Optional
		 - Grant type : Client acting on behalf of a user = Authorization Code
		 - Sign-in redirect URIs = http://localhost:8082/authorization-code/callback
		  - Logout Redirect uri = http://localhost:8082
		 - Base URIs = http://localhost:8082/
		 - Assignments = Allow everyone in your organization to access 
			- Optional: If you want to restrict access, first create group and selct 'Limit access to selected groups'

		 - Note down client id and client secret:
			- Client id: 0oa546fn9qVdmB3lj5d7
			- Client secret : **** ( refer Secrets folder in local) 	

5) Change users-ws:
		- D:\OneDrive\Study\Java\REST-API-Security\11.users-ws-okta
		- POM.xml;
			- Comment dependency for jawa-jwt, mySQL, JPA
			- Add dependency for Okta

				
		- security\SecurityConfig.java:
			- Change

		- security\JwtAuthenticationFilter.java;
			- Delete
		- security\UsersDetailsServiceImpl.java
			- Delete
		

		- user\AuthoritiesEntity.javq
			- Delete
		- user\AuthoritiesRepository.java
			- Delete
		- user\User.java
			- Delete
		- user\UserEntity.java
			- Delete
		- user\UserRepository.java
			- Delete
		- user\UserRoleEntity.java
			- Delete
		- user\UserRoleRepository.java
			- Delete
		- user\UserRoleRepository.java
			- Delete
		- user\UserService.java
			- Delete
		
		- user package:
			- UserController.java 
				- New class for login api

		- application.prperties
			- Configure okta properties for issuer, client id, client secret, redirect uri 
				
			- Issuer:
				- copy the base url in the browser from the Okta user home page and append it with 'oauth2/default'
 
			- Client id:
				- Copy from home-apge of users-api in Okta 
			- Client secret:
				- Copy from home-apge of users-api in Okta 	
			- Redirect uri
				-  Copy last part of Sign-in redirect uri from home-apge of users-api in Okta 		

## Okta Related properties for OAuth2
# issuer = copy the base url in the browser from the Okta user home page and append it with 'oauth2/default'
okta.oauth2.issuer=https://dev-45554186.okta.com/oauth2/default   
okta.oauth2.client-id=0oa546fn9qVdmB3lj5d7
okta.oauth2.client-secret=i1EHil-gDpKkvG-65dU8b0vd5Ff63vQsJYtXQA6s
okta.oauth2.redirect-uri=/authorization-code/callback
		
			- Comment out mySQl and Hibernate properties 

6) Start server for users-ws:




7) Login url using browser:
			- https://localhost:8082/users/login
			- Will show not secure -> go to advanced -> contune to local host:
					- Rsponse : 400 Bad Request
			- Okta -> Applications -> Applications -> users-api -> 
			- General settings -> Edit :
						- Login -> change Sign-in and Sign-out redirect urls from http to https 
						
			- Refresh
			- Okta Login page will appear
			- Sign in with user cred ( mailsonymathew@gmail.com) 
			- Note: in case of page not loading propeorly, delete all cookies from browser and try again
			- Will return Username and authorites ( this is coded in UserController.java class)
				 UserName: 00u55y4owchfr09y45d7
		         UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]

8) User consent screen:
	- OAth 2.0 has two screens:
		- Authorization Sceen
		- Consent Screen
	- In above E.g we did not get consent screen
	- Okta -> Appliocations -> users-api :
			- Ensure User Consent section is availalbe and Check 'REquire Consent'
			- If User Consent section is not available:
				- Place a request to Okta support for enabling User Consent screen: https://support.okta.com/help/open_case?_&_ga=2.256318283.1338688018.1605059643-1267278169.1604905057
			- Now configure consent scope as describe below

9) Configure Consent Scopr Authorization server:
	- Okta -> Security -> API -> Authorization Servers -> Click on default link -> Scopes tab :
			- openid -> edit -> User Consent -> Check 'Require user consent for this scope' -> Uncheck 'Block Services for Requesting this scope'


10) Retart server for users-ws:
		- Delete cookies 
		- https://localhost:8082/users/login
		- Authorization Screen will be shoen first 
				- Enter creds( mailsonymathew@gmail.com, Ro@@@@@@)
		- Okta consent screen screen will be shown next 
				-Allow access 
				 UserName: 00u55y4owchfr09y45d7
		         UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]	


11) Note: Once consent is given it will always be associated with that user 
			- We have to delete the previous consent to see consent screen again.
				- Delete Grants: https://dev-45554186.okta.com/api/v1/users/{userId}/grants
										
				- {userId}:
					- Okta-> Directory -> People -> Click on user -> User id will be available in the end of teh url as shown below
							'https://dev-45554186-admin.okta.com/admin/user/profile/view/00u55y4owchfr09y45d7'
				- Set Header: Authorization = SSWS {{api-token}}
					- In order to get api-token:
							- Okta -> Secuirty -> API -> Authorization Servers -> tab 'Tokens' -> Create token -> name= api-token-1
									- Copy token : 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ
						
					- POSTMAN:
						- Delete-Grant: DELETE: https://dev-45554186.okta.com/api/v1/users/00u55y4owchfr09y45d7/grants
									  : Request -> Headers :
									[{"key":"Authorization","value":"SSWS 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ"]
									
						- Success Response: 
							- 204 : No content 
								- Note: Anything on 200 range is a successs
						
					- Go to browser:
						- Delete cookies 
						- https://localhost:8082/users/login
						- Authorization screen will be shown after enterign teh credentials wfter which we will get consent form
							- UserName: 00u55y4owchfr09y45d7
							UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]	

12)Scopes:
Configure Consent Scope Authorization server:
	- Okta -> Security -> API -> Authorization Servers -> Click on default link -> Scopes tab :
				- If required add consent for all scopes viz. openid, profile, email, address, phone, offline_access, device_sso :
						- edit -> User Consent -> Check 'Require user consent for this scope' -> Uncheck 'Block Services for Requesting this scope'
						
						
						
13)Delete consent:
							
					- POSTMAN:
						- Delete-Grant: DELETE: https://dev-45554186.okta.com/api/v1/users/00u55y4owchfr09y45d7/grants
									  : Request -> Headers :
									[{"key":"Authorization","value":"SSWS 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ"]
									
						- Success Response: 
							- 204 : No content 
								- Note: Anything on 200 range is a successs
								
								
								
14)Go to browser:
						- Delete cookies 
						- https://localhost:8082/users/login
						- Authorization screen will be shown after enterign teh credentials wfter which we will get consent form asking consent for openid, profile information, email address
							UserName: 00u55y4owchfr09y45d7
							UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]		

15)OpenID Connect Implementation : 	Getting Access and ID Tokens for Okta using Postman:

	- Redirect URI for Postman: https://www.getpostman.com/oauth2/callback
	- Okta -> Applications -> Applications-> users-api -> General Settings -> Edit:
			- Login -> Sign-in redirect URIS -> Add URI -> https://www.getpostman.com/oauth2/callback
	- Postman:
		- - Postman:
		- - Postman:
		- Okta-Access-ID-Token-Request  / Okta-Access-ID-Token-Request-profile : 
			- GET: 
				- Request
						- Authorization
							- Type = OAuth2.0
							- Configure new Token:
								- Token Name = okta-token-1
								- Grant type = Authorization code
								- Callback URL = https://www.getpostman.com/oauth2/callback
									- Authorize using Browser = leave unchecked
								- Auth url : https://{your-okta-domain}/oauth2/default/v1/authorize
											- okta-domain: can be foun din logged in okta url( remeber to deelte '-admin':
												- https://dev-45554186-admin.okta.com/admin/app/oidc_client/instance/0oa546fn9qVdmB3lj5d7/#tab-general
											- https://dev-45554186.okta.com/oauth2/default/v1/authorize
								- Access Token URL: https://{your-okta-domain}/oauth2/default/v1/token
											- https://dev-45554186.okta.com/oauth2/default/v1/token
									
								- Client id: Okta-> Applications ->Applications -> users-api -> Client ID =  0oa546fn9qVdmB3lj5d7
								- Client secret : Okta-> Applications ->Applications -> users-api -> Client Secret = ***** ( refer Secrets folder in local directory)
								- Scope = openid
								- State = myTestState
								- Client Authentication = Send Client credentials in Body
								- Delete consent using 'Delete-Grant' request
								- Press 'Get New Access Token'  button in 'Access-Token-Request' request which we have created now 
								- You will be presented with Okta Authentication screen 
										- Enter credentials
								- Next you will be shown Okta's consent screen with opneid label:
										- Allow acces
								- Postman will geenrate as response Access Token & ID Token( because we are uisng OPenID Connect - refer 'OpenIDConnect.png' and '15.OOPenIDConnect.txt'  :
										- Access Token
											- Token name = okta-token-1
											- Token type = Bearer
											- Expires_in = 3600
											- Scope = openid ( Note: we can give 'openid profile' if we want profile details in ID TokeN)
										- id_token
								- We can see Access Token and id_token as Postman is acting as both Front and Back Channel
								- Copy Accees Token & id_token:
										- goto jwt.io
											- decode token to see jwt details: 




16)OAuth Implementation : :Registering Users-api in GitHub:
	- Github -> Settings ->Developer Settings -> OAuth Apps -> New OAuth App 
		- Application name: users-api-2
		- Homepage url:
			- Use Postman's homepage: https://www.getpostman.com/oauth2/callback
		- Authorization callback url:
			- Use Postman's homepage: https://www.getpostman.com/oauth2/callback
		- Enable Device flow:
			- Leave unchecked 
		- Register application
		- After registering -> 	Github -> Settings ->Developer Settings -> OAuth Apps -> users-api-2:
			- Copy Client ID: fb3e42c96a00bef75e0d
			- Client secret : ****  ( refer Secrets folder in local drive)

17) OAuth Implementation : Getting Access token for Github from Postman:
	- Note: Remember Github is only OAuth2.0 provider and note OpenIDConnect Provider. Hence we will get only Access token and we will not get ID Token 
	- - Postman:
		- Github-Access-Token-Request : 
			- GET: 
				- Request
						- Authorization
							- Type = OAuth2.0
							- Configure new Token:
								- Token Name = github-token-1
								- Grant type = Authorization code
								- Callback URL = https://www.getpostman.com/oauth2/callback
									- Authorize using Browser = leave unchecked

								- Auth url : https://github.com/login/oauth/authorize
								- Access Token URL: https://github.com/login/oauth/access_token
										
									
								- Client id:Github -> Settings ->Developer Settings -> OAuth Apps -> users-api-2 -> Client ID =  fb3e42c96a00bef75e0d
								- Client secret : Settings ->Developer Settings -> OAuth Apps -> users-api-2 ->  Client Secret = ****  ( refer Secrets folder in local drive)
								- Scope = user
								- State = myTestState
								- Client Authentication = Send Client credentials in Body
								- Press 'Get New Access Token'  button in 'Access-Token-Request' request which we have created now 
								- You will be presented with Github Authentication screen 
										- Enter credentials
								- Next you will be shown Github's consent screen w
										- Allow acces
								- Postman will geenrate as response Access Token :
										- Access Token
											- Token name = github-token-1
											- Access Token : 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
											- Token type = Bearer
											- Scope = user
										
								- We can see Access Token as Postman is acting as both Front and Back Channel
								- Copy Accees Token :
										- Note: Github access token is not in jwt format

18) OUAth2 vs OIDC( Open ID Connect):
	- OIDC:
		- 2 tokens: 
			- Access Token 
		      - ID  Token
		- Token type:
			- Bearer 
		- Scope: 
			- openid
		- Token type:
			- jwt 

	- OAuth2.0:
		- 1 token: 
			- Access Token 
		- Token type:
			- Bearer 
		- Scope: 
			- user
		- Token type:
			- non-jwt

19)
	- POSTMAN: See all tokens genrated in POSTMAN:
		- Okta-Access-ID-Token-Request -> 
			- Authorization = OAuth2
			- Access Tokens = Select 'Manage Tokens' from dropdown


20) Access token vs ID Token:
	

	- Access Token 
		- Subject: email address viz. the user id
		- jti: 'AT' which is Access Token
sr 

	- ID Token:
 		- Subject: user id is encrypted if scope is 'openid', If more profile details are required use scope = 'openid profile'.
		- jti: 'ID' which is ID Token 
		- auth_time : claim for authorization time is available 
		- idp: id provider 
							