https://jwt.io/introduction
https://datatracker.ietf.org/doc/html/rfc7519

jts are used to mantain integroty of data


1) Current code directory:
	- D:\OneDrive\Study\Java\REST-API-Security\6.books-ws-basic-auth-ssl-db-mysql-authorisation-roles-n-authorities
	- Reference:
		- D:\OneDrive\Study\Java\WorkPlace2020\library-api-v2

2) JWT can be signed suing a secret( HMAC or KeyPair)
	- Signature is calclauted uing header and payload
	- Verify that content has no tbeen tampered

3) Three Parts of JWT:
	1. Header
		- Used to store meta data 
		- Typically consists of two parts:
			- type and signing algorithm
			- E.g. {
				  "typ":"JWT"
				  "alg':"HS512"
						
 
	2 Payload
		-Actual data is present which is called Claims 
		- Claims= Facts about an entity
		- Facts about User if we are talking in context of Authentication
		- Any other entity like Company, House, Flight
		- E.g.
		{
  "sub": "1234567890",
  "name": "Sony Mathew",
  "iat": 1516239022
}
	 
	3. Signature


4) Parts of a JWT are seprated by a dot

5)Sample:
	headerrrr.payloadddd.signaturrrr

6) Decode using https://jwt.io

7) Sampletoken:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNvbnkgTWF0aGV3IiwiaWF0IjoxNTE2MjM5MDIyfQ.-T6ZQazGOfqBz35EMPDAzRnDZtK7aIbLRPZ3yqsdDuU

8) Different types of claims:
	- Registered CLaims
		- Predefined CLaims. Optional but recommended
			- E.g iss,sub.aud
	- Public claims:
		- Defined at will by those using JWTs
		- Defined at https://www.iana.org/assignments/jwt/jwt.xhtml  
	- Private/Custom claims added to suit your need:
		{
  "sub": "1234567890",
  "name": "Sony Mathew",
  "iat": 1516239022
  "userid": "123"
  "role": "user"	   
}


9) Signature validates the token

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  
your-256-bit-secret


10)We will generate signature ( which is a hash value) using teh request and compare it with the signatire send as part of the jwt token 

11) Start application:


12)POSTMAN:
	- Post request as ADMIN using basic auth , authorisation and role:
		- Sample-POST-Request--Authorization-admin
		- Go to  Response Header -> Set-Cookie :
				:JSESSIONID=3041C874461466E7026F4BD8BC6C88E7; Path=/; Secure; HttpOnly
		- Go to Coookies -> You can see that there is a JSESSIONID cookie available
		- Now go to Request Header:
			-> Authorization: Basixc xxxx is present which is teh BAsic Authorizatio Header 
		-> Change request Authorization from 'BAsic Auth' to 'No Auth'( ensure JSESSIONID is present in COOKIE within the Headers section of teh Request)
		-> Send request again
			-> You will get success response  
			-> Thsi is because of cookie JSESSIONID which is basically a JWT generated by Sprign Security 
		-> Delete cookie containing JSESSIONID
		-> Send Request again: Will fail wih authewntication errors

	
