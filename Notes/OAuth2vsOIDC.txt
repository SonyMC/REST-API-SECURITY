Refer:
	- Okta.png
	-D:\OneDrive\Study\Java\REST-API-Security\11.users-ws-okta

Note: 
	- We will not be using teh DB to get the users bit instead we will be using Okta
	- Sprign Security will eb managing all security


1)Okta Introduction:
	- Build on AWS
	- Identity Management Service
	- Provision and manage Users like employees, customers, suppliers, etc.
	- Connect users to cloud SaaS apps
	- It can streamline the user experience by connectiing users to cloud and Saas apps
	- Supports different security mechanisms like Authentication, Authorization, SSO, MFA etc.
	- Supports various industry standards like SAML, OAuth, OIDC, etc
	- Identity-Managemetn-as-a-Service(IDaaS)

2) Other competing vendors:
	- OneLogin
	- Microsoft Azure Active Directory
	- Ping Indentity
	- Duo Securitys
	

3) Creating an Account in Octa:
	- https://developer.okta.com/
		- Free account
		- Okta’s Developer Edition provides everything you need to evaluate and explore Okta for your company. Up to 100 MAU with access to most key developer features in Okta’s products for free with no time limit.
		- I have used Githib OAuth to sign-up
		- Aftetr this I have created anothr user and given 'API Access Management Administrator' role to thsi user

	- Adding a person-:
		- Directory -> People -> Add Person
		- More Actioons: 
			- Import users from CSV
			- Activate
			- Deactivate
			- Expire pwds
			- Unlock people
	- API: 
		- Security -> API


4)Registering Users API in Okta:
	- Okta -> Applications-> Applications-> Create App Integration ->
		 - Sign in Method = OIDC - OpenID Connect
		 - Application Type = Web Application 
		 - Name = users-api
		 - Logo = Optional
		 - Grant type : Client acting on behalf of a user = Authorization Code
		 - Sign-in redirect URIs = http://localhost:8082/authorization-code/callback
		  - Logout Redirect uri = http://localhost:8082
		 - Base URIs = http://localhost:8082/
		 - Assignments = Allow everyone in your organization to access 
			- Optional: If you want to restrict access, first create group and selct 'Limit access to selected groups'

		 - Note down client id and client secret:
			- Client id: 0oa546fn9qVdmB3lj5d7
			- Client secret : i1EHil-gDpKkvG-65dU8b0vd5Ff63vQsJYtXQA6s	

5) Change users-ws:
		- D:\OneDrive\Study\Java\REST-API-Security\11.users-ws-okta
		- POM.xml;
			- Comment dependency for jawa-jwt, mySQL, JPA
			- Add dependency for Okta

				
		- security\SecurityConfig.java:
			- Change

		- security\JwtAuthenticationFilter.java;
			- Delete
		- security\UsersDetailsServiceImpl.java
			- Delete
		

		- user\AuthoritiesEntity.javq
			- Delete
		- user\AuthoritiesRepository.java
			- Delete
		- user\User.java
			- Delete
		- user\UserEntity.java
			- Delete
		- user\UserRepository.java
			- Delete
		- user\UserRoleEntity.java
			- Delete
		- user\UserRoleRepository.java
			- Delete
		- user\UserRoleRepository.java
			- Delete
		- user\UserService.java
			- Delete
		
		- user package:
			- UserController.java 
				- New class for login api

		- application.prperties
			- Configure okta properties for issuer, client id, client secret, redirect uri 
				
			- Issuer:
				- copy the base url in the browser from the Okta user home page and append it with 'oauth2/default'
 
			- Client id:
				- Copy from home-apge of users-api in Okta 
			- Client secret:
				- Copy from home-apge of users-api in Okta 	
			- Redirect uri
				-  Copy last part of Sign-in redirect uri from home-apge of users-api in Okta 		

## Okta Related properties for OAuth2
# issuer = copy the base url in the browser from the Okta user home page and append it with 'oauth2/default'
okta.oauth2.issuer=https://dev-45554186.okta.com/oauth2/default   
okta.oauth2.client-id=0oa546fn9qVdmB3lj5d7
okta.oauth2.client-secret=i1EHil-gDpKkvG-65dU8b0vd5Ff63vQsJYtXQA6s
okta.oauth2.redirect-uri=/authorization-code/callback
		
			- Comment out mySQl and Hibernate properties 

6) Start server for users-ws:




7) Login url using browser:
			- https://localhost:8082/users/login
			- Will show not secure -> go to advanced -> contune to local host:
					- Rsponse : 400 Bad Request
			- Okta -> Applications -> Applications -> users-api -> 
			- General settings -> Edit :
						- Login -> change Sign-in and Sign-out redirect urls from http to https 
						
			- Refresh
			- Okta Login page will appear
			- Sign in with user cred ( mailsonymathew@gmail.com) 
			- Note: in case of page not loading propeorly, delete all cookies from browser and try again
			- Will return Username and authorites ( this is coded in UserController.java class)
				 UserName: 00u55y4owchfr09y45d7
		         UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]

8) User consent screen:
	- OAth 2.0 has two screens:
		- Authorization Sceen
		- Consent Screen
	- In above E.g we did not get consent screen
	- Okta -> Appliocations -> users-api :
			- Ensure User Consent section is availalbe and Check 'REquire Consent'
			- If User Consent section is not available:
				- Place a request to Okta support for enabling User Consent screen: https://support.okta.com/help/open_case?_&_ga=2.256318283.1338688018.1605059643-1267278169.1604905057
			- Now configure consent scope as describe below

9) Configure Consent Scopr Authorization server:
	- Okta -> Security -> API -> Authorization Servers -> Click on default link -> Scopes tab :
			- openid -> edit -> User Consent -> Check 'Require user consent for this scope' -> Uncheck 'Block Services for Requesting this scope'


10) Retart server for users-ws:
		- Delete cookies 
		- https://localhost:8082/users/login
		- Authorization Screen will be shoen first 
				- Enter creds( mailsonymathew@gmail.com, Ro@@@@@@)
		- Okta consent screen screen will be shown next 
				-Allow access 
				 UserName: 00u55y4owchfr09y45d7
		         UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]	


11) Note: Once consent is given it will always be associated with that user 
			- We have to delete the previous consent to see consent screen again.
				- Delete Grants: https://dev-45554186.okta.com/api/v1/users/{userId}/grants
										
				- {userId}:
					- Okta-> Directory -> People -> Click on user -> User id will be available in the end of teh url as shown below
							'https://dev-45554186-admin.okta.com/admin/user/profile/view/00u55y4owchfr09y45d7'
				- Set Header: Authorization = SSWS {{api-token}}
					- In order to get api-token:
							- Okta -> Secuirty -> API -> Authorization Servers -> tab 'Tokens' -> Create token -> name= api-token-1
									- Copy token : 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ
						
					- POSTMAN:
						- Delete-Grant: DELETE: https://dev-45554186.okta.com/api/v1/users/00u55y4owchfr09y45d7/grants
									  : Request -> Headers :
									[{"key":"Authorization","value":"SSWS 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ"]
									
						- Success Response: 
							- 204 : No content 
								- Note: Anything on 200 range is a successs
						
					- Go to browser:
						- Delete cookies 
						- https://localhost:8082/users/login
						- Authorization screen will be shown after enterign teh credentials wfter which we will get consent form
							- UserName: 00u55y4owchfr09y45d7
							UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]	

12)Scopes:
Configure Consent Scop Authorization server:
	- Okta -> Security -> API -> Authorization Servers -> Click on default link -> Scopes tab :
				- If required add consent for all scopes viz. openid, profile, email, address, phone, offline_access, device_sso :
						- edit -> User Consent -> Check 'Require user consent for this scope' -> Uncheck 'Block Services for Requesting this scope'
						
						
						
13)Delete consent:
							
					- POSTMAN:
						- Delete-Grant: DELETE: https://dev-45554186.okta.com/api/v1/users/00u55y4owchfr09y45d7/grants
									  : Request -> Headers :
									[{"key":"Authorization","value":"SSWS 00cKQzjjSgY4J_r4sFmFpH1kBJ6kDjV-g40QMaljmZ"]
									
						- Success Response: 
							- 204 : No content 
								- Note: Anything on 200 range is a successs
								
								
								
14)Go to browser:
						- Delete cookies 
						- https://localhost:8082/users/login
						- Authorization screen will be shown after enterign teh credentials wfter which we will get consent form asking consent for openid, profile information, email address
							UserName: 00u55y4owchfr09y45d7
							UserAuthorities: [ROLE_USER, SCOPE_email, SCOPE_openid, SCOPE_profile]					